// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scalapb.learning.greeting

@SerialVersionUID(0L)
final case class Greet(
    greeting: _root_.scala.Predef.String = "",
    username: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Greet] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = greeting
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = username
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = greeting
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = username
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withGreeting(__v: _root_.scala.Predef.String): Greet = copy(greeting = __v)
    def withUsername(__v: _root_.scala.Predef.String): Greet = copy(username = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = greeting
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = username
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(greeting)
        case 2 => _root_.scalapb.descriptors.PString(username)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scalapb.learning.greeting.Greet
    // @@protoc_insertion_point(GeneratedMessage[scalapb.learning.Greet])
}

object Greet extends scalapb.GeneratedMessageCompanion[scalapb.learning.greeting.Greet] with scalapb.HasBuilder[scalapb.learning.greeting.Greet] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.learning.greeting.Greet] with scalapb.HasBuilder[scalapb.learning.greeting.Greet] = this
  def merge(`_message__`: scalapb.learning.greeting.Greet, `_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.learning.greeting.Greet = newBuilder(_message__).merge(_input__).result()
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.learning.greeting.Greet] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scalapb.learning.greeting.Greet(
        greeting = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        username = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GreetingProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GreetingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scalapb.learning.greeting.Greet(
    greeting = "",
    username = ""
  )
  final class Builder private (
    private var __greeting: _root_.scala.Predef.String,
    private var __username: _root_.scala.Predef.String,
    private var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder
  ) extends _root_.scalapb.MessageBuilder[scalapb.learning.greeting.Greet] {
    def merge(`_input__`: _root_.com.google.protobuf.CodedInputStream): this.type = {
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __greeting = _input__.readStringRequireUtf8()
          case 18 =>
            __username = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      this
    }
    def result(): scalapb.learning.greeting.Greet = {
      scalapb.learning.greeting.Greet(
        greeting = __greeting,
        username = __username,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
  }
  object Builder extends _root_.scalapb.MessageBuilderCompanion[scalapb.learning.greeting.Greet, scalapb.learning.greeting.Greet.Builder] {
    def apply(): Builder = new Builder(
      __greeting = "",
      __username = "",
      `_unknownFields__` = null
    )
    def apply(`_message__`: scalapb.learning.greeting.Greet): Builder = new Builder(
        __greeting = _message__.greeting,
        __username = _message__.username,
        `_unknownFields__` = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
    )
  }
  def newBuilder: Builder = scalapb.learning.greeting.Greet.Builder()
  def newBuilder(`_message__`: scalapb.learning.greeting.Greet): Builder = scalapb.learning.greeting.Greet.Builder(_message__)
  implicit class GreetLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.learning.greeting.Greet]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.learning.greeting.Greet](_l) {
    def greeting: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.greeting)((c_, f_) => c_.copy(greeting = f_))
    def username: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.username)((c_, f_) => c_.copy(username = f_))
  }
  final val GREETING_FIELD_NUMBER = 1
  final val USERNAME_FIELD_NUMBER = 2
  def of(
    greeting: _root_.scala.Predef.String,
    username: _root_.scala.Predef.String
  ): _root_.scalapb.learning.greeting.Greet = _root_.scalapb.learning.greeting.Greet(
    greeting,
    username
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scalapb.learning.Greet])
}
